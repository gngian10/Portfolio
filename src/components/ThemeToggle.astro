---
import DarkIcon from "../Icons/DarkIcon.astro";
import LightIcon from "../Icons/LightIcon.astro";
import SystemIcon from "../Icons/SystemIcon.astro";

const THEMES = ["Light", "Dark", "Sistema"];
---

<div class="relative ml-1 mr-1">
    <button
        transition:persist
        id="theme-toggle-btn"
        class="appearance-none border-none flex hover:scale-125 transition"
    >
        <span class="sr-only">Elige el tema</span>

        <LightIcon id="light" class="theme-toggle-icon size-5 transition-all" />

        <DarkIcon
            id="dark"
            class="theme-toggle-icon absolute size-5 transition-all"
        />

        <SystemIcon
            id="sistema"
            class="theme-toggle-icon absolute size-5 transition-all"
        />
    </button>

    <div
        transition:persist
        id="themes-menu"
        class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
    >
        <ul>
            {
                THEMES.map((theme) => (
                    <li class="themes-menu-option px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm">
                        {theme}
                    </li>
                ))
            }
        </ul>
    </div>
</div>

<style>
    #themes-menu.open {
        display: inline;
        animation: scale-up-center 0.15s ease-out;
    }

    @keyframes scale-up-center {
        from {
            transform: scale(0.8);
            opacity: 0;
        }

        to {
            transform: scale(1);
            opacity: 1;
        }
    }
</style>

<script>
    const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
    const themesMenu = document.querySelector("#themes-menu");
    const themeToggleBtn = document.querySelector("#theme-toggle-btn");
    const themeToggleIcons = document.querySelectorAll(".theme-toggle-icon");
    const themesMenuOptions = document.querySelectorAll(".themes-menu-option");

    matchMedia.addEventListener("change", updateTheme);

    // Theme preference
    function getThemePreference() {
        return sessionStorage.getItem("theme") ?? "sistema";
    }

    function updateTheme() {
        const themePreference = getThemePreference();

        const isDark =
            themePreference === "dark" ||
            (themePreference === "sistema" && matchMedia.matches);

        updateIcon(themePreference);
        document.documentElement.classList[isDark ? "add" : "remove"]("dark");
    }

    function updateIcon(themePreference: string) {
        themeToggleIcons.forEach((theme: Element) => {
            if (theme instanceof SVGElement) {
                theme.style.scale = theme.id === themePreference ? "1" : "0";
            }
        });
    }

    updateTheme();

    // Toggle btn menu
    document.addEventListener("click", () =>
        themesMenu?.classList.remove("open")
    );

    themeToggleBtn?.addEventListener("click", (e) => {
        e.stopPropagation();

        const isClosed = !themesMenu?.classList.contains("open");
        themesMenu?.classList[isClosed ? "add" : "remove"]("open");
    });

    document.addEventListener("astro:after-swap", () => {
        updateTheme();
        window.scrollTo({ left: 0, top: 0, behavior: "instant" });
    });

    // Handle menu options
    themesMenuOptions.forEach((element) => {
        element.addEventListener("click", (e) => {
            const target = e.target as HTMLElement;

            sessionStorage.setItem(
                "theme",
                target.innerText.toLowerCase().trim()
            );

            updateTheme();
        });
    });
</script>
